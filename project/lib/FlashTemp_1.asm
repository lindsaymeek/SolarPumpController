;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: FlashTemp_1.asm
;;   Version: 2.0, Updated on 2003/08/19 at 20:44:15
;;  Generated by PSoC Designer ver 4.0 b865 : 27 August, 2003
;;
;;  DESCRIPTION: FlashTemp User Module software implementation file for the
;;               22/24/27xxx PSoC family of devices.
;;
;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API 
;;        function returns. Even though these registers may be preserved now,
;;        there is no guarantee they will be preserved in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "FlashTemp_1.inc"
include "m8c.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  FlashTemp_1_Start
export _FlashTemp_1_Start
export  FlashTemp_1_fIsData
export _FlashTemp_1_fIsData
export  FlashTemp_1_cGetData
export _FlashTemp_1_cGetData
export  FlashTemp_1_Stop
export _FlashTemp_1_Stop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;       WARNING WARNING WARNING
; The following exports are for backwards
; compatibility only and should not be used
; for new designs.
export  fFlashTemp_1_IsData
export _fFlashTemp_1_IsData
export  cFlashTemp_1_GetData
export _cFlashTemp_1_GetData
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-----------------------------------------------
;  EQUATES
;-----------------------------------------------
bSAMPLE_SIZE:     equ  FFh  ; Number of samples to collect is 255

AREA UserModules (ROM,REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: FlashTemp_1_Start
;
;  DESCRIPTION:
;    Powers up the PSoC Block and does everything needed
;    to start the data collection process.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS:   none
;
;  SIDE EFFECTS:
;    REGISTERS ARE VOLATILE:  THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;
;   FlashTemp_1_Start sets the Power[1:0] bits of the analog 
;   block's CR3 register. (Because the bits of CR3 for the temperature 
;   block have fixed values, the setting of the other CR3 bits can be 
;   assumed and a constant is used instead of a mask.)  Sets the analog
;   column interrupt to be sourced by PHI2 falling edge.
;   Turns off auto reset on the feedback cap (Fcap) so that it becomes
;   an integrator for ADC.  Loads the count variable used by the ISR 
;   with the number of samples to be taken.  Initializes a data 
;   accumulation variable that is incremented by the ISR.  Enables 
;   interrupts and then lets the ISR handle the rest.  
;   (Once data collection has been completed by the ISR, the ISR will 
;   disable interrupts, reset the integrating cap and power off the 
;   block.)
;
;   NOTE:  The contents of cFlashTemp_1_ADCData is invalid while 
;          data is being collected.
;-----------------------------------------------------------------------
 FlashTemp_1_Start:
_FlashTemp_1_Start:
   mov reg[FlashTemp_1_FlashTempCR3],(bfFLASHTEMP_CR3 | FlashTemp_1_bfMEDPOWER)
                                        ;set the power to Medium
   or  reg[CMP_CR0],FlashTemp_1_bfINT_CTRL_MASK
                                        ;set the interrupt to occur on
                                        ;   the falling edge of PHI2

   and reg[FlashTemp_1_FlashTempCR2],~FlashTemp_1_bfAUTO_ZERO
                                        ;Enable integrator
   mov [FlashTemp_1_bADCCounter],bSAMPLE_SIZE      
                                        ;Set # of samples
   mov [FlashTemp_1_iADCData],>FlashTemp_1_iOFFSET
   mov [FlashTemp_1_iADCData+1],<FlashTemp_1_iOFFSET
                                        ;Initialize the data accumulator
   or  reg[INT_MSK0],FlashTemp_1_bfINT_MASK
                                        ;Enable interrupt
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: FlashTemp_1_fIsData
;
;  DESCRIPTION:
;    Returns the status of the A/D process.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS:
;    A = 0xFF means it is not done.
;    A = 0x00 means it is done.
;
;  SIDE EFFECTS:
;    REGISTERS ARE VOLATILE:  THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;   The counter used in the ISR (bFlashTemp_1_ADCCounter) is loaded 
;   with bSAMPLE_SIZE by FlashTemp_1_Start and counted down in the
;   ISR (FlashTemp_1_FlashTempInt).  When it reaches 0, the data 
;   collection process is complete.  fFlashTemp_1_IsData returns
;   a value indicating the status of counter.
;
;   NOTE:  The contents of cFlashTemp_1_ADCData is invalid while 
;          data is being collected.
;-----------------------------------------------------------------------
 FlashTemp_1_fIsData:
_FlashTemp_1_fIsData:
 fFlashTemp_1_IsData:    ; For backwards compatibility only.
_fFlashTemp_1_IsData:    ; For backwards compatibility only.
    cmp [FlashTemp_1_bADCCounter],0
    jnz ClearFlag
    mov A,FFh
    ret
ClearFlag: 
    mov A,0
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: FlashTemp_1_cGetData
;
;  DESCRIPTION:
;    Returns the results of the temperature A/D process.  
;    Does not check if the data is valid.  The routine 
;    fFlashTemp_1_IsData should be used to see if the
;    data is ready to be read.  After the data has been
;    read bFlashTemp_1_ADCCounter is set to 
;    a non-zero value to indicate that the data is not
;    new.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS:
;    A = Temperature in 8-bit 2's complement format
;
;  SIDE EFFECTS:
;    REGISTERS ARE VOLATILE:  THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;   When the ISR has completed 255 data collections, the high byte of
;   a 16-bit variable (cFlashTemp_1_ADCData) will contain 
;   the temperature in degrees Celsius.  The upper byte of that variable
;   is read and returned.  Making bFlashTemp_1_ADCCounter non-zero
;   will indicate that the data is now "old".
;-----------------------------------------------------------------------
 FlashTemp_1_cGetData:
_FlashTemp_1_cGetData:
 cFlashTemp_1_GetData:     ; For backwards compatibility only.
_cFlashTemp_1_GetData:     ; For backwards compatibility only.
    mov [FlashTemp_1_bADCCounter],bSAMPLE_SIZE   
                                        ;this clears the data ready flag
    mov A,[FlashTemp_1_iADCData]   ;get the MSB as the data 
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: FlashTemp_1_Stop
;
;  DESCRIPTION:
;    Powers down the PSoC block.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS:   none
;
;  SIDE EFFECTS:
;    REGISTERS ARE VOLATILE:  THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;   FlashTemp_1_Stop sets the Power[1:0] bits of the analog 
;   block's CR3 register to off and disables the column interrupt.  
;   Doing this while data is being collected will result in the 
;
;   NOTE:  The contents of cFlashTemp_1_ADCData is invalid while 
;          data is being collected.
;-----------------------------------------------------------------------
 FlashTemp_1_Stop:
_FlashTemp_1_Stop:
   mov  reg[FlashTemp_1_FlashTempCR3],bfFLASHTEMP_CR3   ;power down
   and  reg[INT_MSK0],~FlashTemp_1_bfINT_MASK           ;disable the interrupt
   and  reg[CMP_CR0],~FlashTemp_1_bfINT_CTRL_MASK        ; Reset bit back to default state.
   ret
.ENDSECTION

; End of File FlashTemp_1.asm   
