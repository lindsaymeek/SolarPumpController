;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME:   Amp_Vac.asm
;;  Version: 2.0, Updated on 2003/08/28 at 17:09:28
;;  Generated by PSoC Designer ver 4.0 b865 : 27 August, 2003
;;
;;  DESCRIPTION:
;;    Assembler source code for a two-OpAmp Instrumentation Amplifier
;;    topology in the 25/26xxx family of PSoC devices
;;
;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API
;;        function returns. Even though these registers may be preserved now,
;;        there is no guarantee they will be preserved in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress MicroSystems 2001-2003. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "Amp_Vac.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------

export  Amp_Vac_Start
export _Amp_Vac_Start
export  Amp_Vac_SetPower
export _Amp_Vac_SetPower

export  Amp_Vac_SetGain
export _Amp_Vac_SetGain

export  Amp_Vac_Stop
export _Amp_Vac_Stop


AREA bss (RAM,REL)

;-----------------------------------------------
;  Constant Definitions
;-----------------------------------------------

POWERMASK:                     equ 0x03    ; Power field mask for CR2
GAINMASK:                      equ F0h     ; Gain field mask for CR0


;-----------------------------------------------
; Variable Allocation
;-----------------------------------------------


AREA UserModules (ROM, REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Amp_Vac_Start
;  FUNCTION NAME: Amp_Vac_Setpower
;
;  DESCRIPTION:
;    Sets power to the analog blocks used in this module. All three blocks
;    are set to the same power setting (which should be the same as the
;    analog reference power global parameter for best operation!). Constants
;    for proper values are defined in asm and C interface files.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall BYTE bPowerSetting in the A register
;  RETURNS:      Nothing
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
 Amp_Vac_Start:
_Amp_Vac_Start:
 Amp_Vac_SetPower:
_Amp_Vac_SetPower:

    and  A, POWERMASK                         ; mask A to protect unchanged bits
    mov  X, SP                                ; define temp store location

    push A                                    ; put power value in temp store
    mov  A, reg[Amp_Vac_INV_CR2]     ; read power value
    and  A, ~POWERMASK                        ; clear power bits in A
    or   A, [X]                               ; combine power value with balance of reg.
    mov  reg[Amp_Vac_INV_CR2], A

    mov  A, reg[Amp_Vac_NON_INV_CR2] ; read power value
    and  A, ~POWERMASK                        ; clear power bits in A
    or   A, [X]                               ; combine power value with balance of reg.
    mov  reg[Amp_Vac_NON_INV_CR2], A
    pop  A
    ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Amp_Vac_SetGain
;
;  DESCRIPTION:
;    Applies gain set values to the module's PSoC blocks
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall BYTE bGain in the A register
;  RETURNS:      Nothing
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;  THEORY of OPERATION or PROCEDURE:
;    The A register contains the gain setting per values in .inc file.
;      Values in range of 00h to 07h, upper 4 bits only.
;      Gain value applied to NON_INV block.
;      Difference (E0h-gain value) applied to _INV block.
;
 Amp_Vac_SetGain:
_Amp_Vac_SetGain:

    and  A, GAINMASK                          ; mask A to protect unchanged bits
    mov  X, SP                                ; set base address for local variable

    push A
    mov  A, reg[Amp_Vac_NON_INV_CR0] ; read gain value
    and  A, ~GAINMASK                         ; clear gain bits in A
    or   A, [X]                               ; combine gain value with balance of reg.
    mov  reg[Amp_Vac_NON_INV_CR0], A

    mov  A, E0h                               ; load gain complement value
    sub  a, [X]                               ; calculate gain value for -INV block
    push A
    mov  A, reg[Amp_Vac_INV_CR0]     ; read gain complement value
    and  A, ~GAINMASK                         ; clear gain bits in A
    or   A, [X+1]                             ; combine gain value with balance of reg.
    mov  reg[Amp_Vac_INV_CR0], A
    pop  A
    pop  A
    ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Amp_Vac_Stop
;
;  DESCRIPTION: Turns off power to the two CT blocks
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None
;  RETURNS:      Nothing
;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
 Amp_Vac_Stop:
_Amp_Vac_Stop:


    and  reg[Amp_Vac_NON_INV_CR2], ~POWERMASK
    and  reg[Amp_Vac_INV_CR2], ~POWERMASK
    ret

.ENDSECTION

; End of File Amp_Vac.asm
