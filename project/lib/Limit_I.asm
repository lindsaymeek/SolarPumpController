
;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME:   Limit_I.asm
;;  Version: 3.0, Updated on 2003/08/27 at 14:02:42
;;  Generated by PSoC Designer ver 4.0 b865 : 27 August, 2003
;;
;;  DESCRIPTION: CMPPRG User Module software implementation file
;;               for CY8C26xxx and related devices.
;;
;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API 
;;        function returns. Even though these registers may be preserved now,
;;        there is no guarantee they will be preserved in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress MicroSystems 2002-2003. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************
include "Limit_I.inc"
include "m8c.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  Limit_I_Start
export _Limit_I_Start

export  Limit_I_SetPower
export _Limit_I_SetPower

export  Limit_I_SetRef
export _Limit_I_SetRef

export  Limit_I_Stop
export _Limit_I_Stop

;; -----------------------------------------------------------------
;;                         Register Definitions
;; -----------------------------------------------------------------
;;
;; Uses 1 Continuous Time Block configured as shown. This API depends
;; on knowing the exact personalization of CR0 and CR2 bitfields
;; for time efficiency.
;;
;; * For a Mask/Val pair, this indicates that the value is
;;   determined by the user either through config-time parameteriza-
;;   tion or run-time manipulation.
;;
;; BIT FIELD	         Mask/Val Function
;; -----------------    	----- 	--------------------
;; COMP_CR0.RES_RATIO_T2B	F0/*	User Parameter (by table)
;; COMP_CR0.GAIN_ATTEN		08/0	Gain
;; COMP_CR0.RES_SOURCE		04/0	Res source VDD
;; COMP_CR0.RES_REF		03/*	User Parameter
;;
;; COMP_CR1.A_OUT		80/0	Output bus disabled		
;; COMP_CR1.COMP_EN		40/*	User Parameter (init: ENABLE)
;; COMP_CR1.CT_NEG_INPUT_MUX	38/4	Neg mux to analog f.b. tap
;; COMP_CR1.CT_POS_INPUT_MUX	07/*	User Parameter (Input selection)
;;
;; COMP_CR2.CP_COMP		80/0	Latch transparent on PH1
;; COMP_CR2.CK_COMP		40/0	Latch transparent
;; COMP_CR2.CC_COMP		20/0	Mode Comparator (not OP-amp)
;; COMP_CR2.BYPASS_OBUS		1C/0	Bypass OFF
;; COMP_CR2.PWR_SELECT		03/0	Power OFF at start-up


;-----------------------------------------------
;  EQUATES
;-----------------------------------------------
POWERMASK:    equ 03h
REFMASK:      equ f0h
GAINMASK:     equ f4h
EXGAIN:       equ 01h
HIGHGAIN:     equ 04h
HIGHGAINMASK: equ 10h


AREA UserModules (ROM, REL)
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Limit_I_Start
;  FUNCTION NAME: Limit_I_SetPower
;
;  DESCRIPTION:
;    Applies power setting to the module's PSoC blocks
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;-----------------------------------------------------------------------------

 Limit_I_Start:
_Limit_I_Start:
 Limit_I_SetPower:
_Limit_I_SetPower:

    and A, POWERMASK                             ; mask A to protect unchanged bits
    mov X, SP                                    ; define temp store location

    push A                                       ; put power value in temp store
    mov A, reg[Limit_I_COMP_CR2]                  ; read power value
    and A, ~POWERMASK                            ; clear power bits in A
    or  A, [X]                                   ; combine power value with balance of reg.
    mov reg[Limit_I_COMP_CR2], A
    pop A
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Limit_I_SetRef
;
;  DESCRIPTION:
;    Sets comparator threshold at specified ratio between Low Limit and Vcc
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;   A contains reference value. 
;     Ref values shown are for example
;     1.000  0 0 0 0			
;     0.937  0 0 0 1
;     ....
;     0.500  0 1 1 1
;     ....
;     0.062  0 0 0 0
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;-----------------------------------------------------------------------------

 Limit_I_SetRef:
_Limit_I_SetRef:

    and  A, GAINMASK                             ; mask A to protect unchanged bits
    mov  X, SP                                   ; define temp store location
;
    push A                                       ; put reference value in temp store
    mov  A, reg[Limit_I_COMP_CR0]                ; read old CR0 value
    and  A, ~REFMASK                             ; clear reference bits in A
    tst  [X],HIGHGAIN                            ; See if High Gain bit is set
    jnz  .SETHIGHGAIN
    and  reg[Limit_I_COMP_CR3],~EXGAIN           ; Clear High Gain bit.
    or   A, [X]                                  ; combine gain value with balance of reg.
    mov  reg[Limit_I_COMP_CR0], A                ; move complete value back to register
    pop  A
    ret

.SETHIGHGAIN:
    and  [X],HIGHGAINMASK                        ; Make sure we have a valid high gain
    or   A, [X]                                  ; combine ref value with balance of reg.
    mov  reg[Limit_I_COMP_CR0], A       ; move complete value back to register
    or   reg[Limit_I_COMP_CR3], EXGAIN           ; Set High Gain bit. 
    pop  A
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Limit_I_Stop
;
;  DESCRIPTION:
;    Removes power from analog block.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
;
;-----------------------------------------------------------------------------

 Limit_I_Stop:
_Limit_I_Stop:

      
    and reg[Limit_I_COMP_CR2], FCh
    ret
.ENDSECTION

; End of File Limit_I.asm
