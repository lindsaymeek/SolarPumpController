//*****************************************************************************
//*****************************************************************************
//  FILENAME: PWM_PH_C.h
//   Version: 2.2, Updated on 2003/08/26 at 16:06:22
//  Generated by PSoC Designer ver 4.0 b865 : 27 August, 2003
//
//  DESCRIPTION: PWMDB8 User Module C Language interface file
//               for the 22/24/25/26/27xxx) PSoC family of devices
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8c.h>

#pragma fastcall  PWM_PH_C_EnableInt
#pragma fastcall  PWM_PH_C_DisableInt
#pragma fastcall  PWM_PH_C_Start
#pragma fastcall  PWM_PH_C_Stop
#pragma fastcall  PWM_PH_C_WritePeriod
#pragma fastcall  PWM_PH_C_WritePulseWidth
#pragma fastcall  PWM_PH_C_WriteDeadTime
#pragma fastcall  PWM_PH_C_bReadPulseWidth

//-------------------------------------------------
// Prototypes of the PWM_PH_C API.
//-------------------------------------------------
extern void  PWM_PH_C_EnableInt(void);
extern void  PWM_PH_C_DisableInt(void);
extern void  PWM_PH_C_Start(void);
extern void  PWM_PH_C_Stop(void);
extern void  PWM_PH_C_WritePeriod(BYTE bPeriod);
extern void  PWM_PH_C_WritePulseWidth(BYTE bPulseWidth);
extern void  PWM_PH_C_WriteDeadTime(BYTE bDeadTime);
extern BYTE  PWM_PH_C_bReadPulseWidth(void);	

//-------------------------------------------------
// Do not use! For backwards compatibility only.
#pragma fastcall bPWM_PH_C_ReadPulseWidth
extern BYTE bPWM_PH_C_ReadPulseWidth(void);	
//-------------------------------------------------

//-------------------------------------------------
// Register Addresses for PWM_PH_C
//-------------------------------------------------
#pragma ioport  PWM_PH_C_PWM_CONTROL_REG:   0x033          //PWM Control register
BYTE            PWM_PH_C_PWM_CONTROL_REG;
#pragma ioport  PWM_PH_C_PWM_COUNTER_REG:   0x030          //PWM Counter register
BYTE            PWM_PH_C_PWM_COUNTER_REG;
#pragma ioport  PWM_PH_C_PWM_PERIOD_REG:    0x031          //PWM Period value register
BYTE            PWM_PH_C_PWM_PERIOD_REG;
#pragma ioport  PWM_PH_C_PULSE_WIDTH_REG:   0x032          //PWM PulseWidth register
BYTE            PWM_PH_C_PULSE_WIDTH_REG;
#pragma ioport  PWM_PH_C_PWM_FUNC_REG:  0x130              //Function register
BYTE            PWM_PH_C_PWM_FUNC_REG;
#pragma ioport  PWM_PH_C_PWM_INPUT_REG: 0x131              //Input register
BYTE            PWM_PH_C_PWM_INPUT_REG;
#pragma ioport  PWM_PH_C_PWM_OUTPUT_REG:    0x132          //Output register
BYTE            PWM_PH_C_PWM_OUTPUT_REG;
#pragma ioport  PWM_PH_C_DB_CONTROL_REG:    0x037          //DB Control register
BYTE            PWM_PH_C_DB_CONTROL_REG; 
#pragma ioport  PWM_PH_C_DB_COUNTER_REG:    0x034          //DB Counter register
BYTE            PWM_PH_C_DB_COUNTER_REG; 
#pragma ioport  PWM_PH_C_DEAD_TIME_REG: 0x035              //DB Dead Timer register
BYTE            PWM_PH_C_DEAD_TIME_REG; 
#pragma ioport  PWM_PH_C_DB_FUNC_REG:   0x134              //Function register
BYTE            PWM_PH_C_DB_FUNC_REG; 
#pragma ioport  PWM_PH_C_DB_INPUT_REG:  0x135              //Input register
BYTE            PWM_PH_C_DB_INPUT_REG;  
#pragma ioport  PWM_PH_C_DB_OUTPUT_REG: 0x136              //Output register
BYTE            PWM_PH_C_DB_OUTPUT_REG; 

// end of file PWM_PH_C.h
